(* Intérprete de While en While, extendido para programas que tengan mas de una única variable. *)

pattern dohd   ;
pattern dotl   ;
pattern docons ;
pattern doeq   ;
pattern doasgn ;
pattern dowh   ;


prog pred:

read X;
    Y:= tl X;
write Y;

prog lookup:

read JSt;
    J := hd JSt;
    Store := tl JSt;
    while J do
        J := pred J;
        Store := tl Store;
    od;
    X := hd Store;
write X;

prog update:

read JVSt; 
    J := hd JVSt;
    V := hd (tl JVSt);
    St := tl (tl JVSt);
    T := nil;                   (* Store := update J V Store *)
    K := J;
    while K do                  (* net effect is to set... *)
        T := cons (hd St) T;    (* ... T=(dj-1...d0) and...*)
        St := tl St;            (* ... St=(dj dj+1...dn *)
        K := pred K;
    od;
    St := cons V (tl St);   (* St = (V dj+1...dn) *)
    while T do
        St := cons (hd T) St;
        T := tl T;
    od;
write St;

prog main:

read PD;
    Pgm := hd PD;                   (* p = ((var i) c (var j)) *)
    D := tl PD;                     (* D = d (input value) *)
    I := hd (tl (hd Pgm));          (* I = i (input variable) *)
    J := hd (tl (hd (tl (tl Pgm))));(* J = j (output variable) *)
    C := hd (tl Pgm);               (* C = c (program code) *)
    IDnil := cons I (cons D nil); 
    Vl := update IDnil;             (* (var i) initially d, others nil *)
    Cd := cons C nil;               (* Cd = (c.nil), Code to execute is c *)
    St := nil;                      (* St = nil, computation Stack empty *)
    while Cd do                     (* do while there is code to execute *)
        rewrite [Cd , St] by
            [(('quote'.D).Cr)  ,     St] ==> St := cons D St ; Cd := Cr;
            [(('var'.J).Cr) ,     St] ==> Cd := Cr; JVl := cons J Vl; X := lookup JVl; St:=cons X St;
            [(('hd'.E).Cr)     ,     St] ==> [cons E (cons dohd Cr) , St]
            [(dohd.Cr)       , (T.Sr)] ==> [Cr , cons (hd T) Sr]
            [(('tl'.E).Cr)     ,     St] ==> [cons E (cons dotl Cr), St]
            [(dotl.Cr)       , (T.Sr)] ==> [Cr, cons (tl T) Sr]
            [(('cons'.(E1.E2)).Cr),    St] ==> [cons E1 (cons E2 (cons docons Cr)),St]
            [(docons.Cr)  ,(U.(T.Sr))] ==> [Cr, cons (cons T U) Sr]
            [(('=?'.(E1.E2)).Cr)  ,    St] ==> [cons E1 (cons E2 (cons doeq Cr)),St]
            [(doeq.Cr)    ,(U.(T.Sr))] ==> [Cr, cons (=? T U) Sr]
            [((';'.(C1.C2)).Cr) ,    St] ==> [cons C1 (cons C2 Cr), St]
            [((':='.((var.K).E)).Cr),St] ==> Cd := cons E (cons doasgn (cons K Cr));
            [(doasgn.(K.Cr))     , (T.Sr)] ==> Cd := Cr; St := Sr; KTVl := cons K (cons T Vl); Vl := update KTVl; 
            [(('while'.(E.C)).Cr),   St] ==> [cons E (cons dowh (cons (cons 'while' (cons E C)) Cr)), St]
            [(dowh.(('while'.(E.C)).Cr)), (nil.Sr)] ==> [Cr,Sr]
            [(dowh.(('while'.(E.C)).Cr)),((D.F).S)] ==> [cons C (cons (cons 'while' (cons E C)) Cr), S]
            [nil,St]                              ==> [nil,St]
        end;
    od;
    JVl := cons J Vl;
    Out := lookup JVl;  (* Output is the value of (var j) *)
write Out;

